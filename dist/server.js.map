{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder\"?fa14","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","[]","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/cdTest05Tab/CdTest05Tab.ts?c736","webpack:///./src/app/cdTest05Bot/CdTest05Bot.ts?ebf1","webpack:///./src/app/cdTest05Bot/dialogs/HelpDialog.ts?4ef2","webpack:///./src/app/cdTest05Bot/dialogs/WelcomeDialog.ts?deef","webpack:///./src/app/cdTest05MessageExtension/CdTest05MessageExtension.ts?6814","webpack:///external \"botbuilder-teams\"?cb0c","webpack:///./src/app/cdTest05OutgoingWebhook/CdTest05OutgoingWebhook.ts?1a5e","webpack:///external \"crypto\"?4c76","webpack:///./src/app/cdTest05Connector/CdTest05Connector.ts?dd8f","webpack:///external \"request\"?0fbe","webpack:///external \"node-json-db\"?027e"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Express","http","path","morgan","express_msteams_host_1","log","debug","config","allComponents","express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","join","__dirname","static","MsTeamsApiRouter","MsTeamsPageRouter","root","components","index","createServer","listen","nonce","__export","CdTest05Tab","__decorate","PreventIframe","botbuilder_dialogs_1","botbuilder_1","HelpDialog_1","WelcomeDialog_1","CdTest05MessageExtension_1","botbuilder_teams_1","CdTest05Bot","[object Object]","conversationState","this","activityProc","TeamsActivityProcessor","_cdTest05MessageExtension","default","dialogState","createProperty","dialogs","DialogSet","add","messageActivityHandler","onMessage","context","__awaiter","teamsContext","TeamsContext","from","activity","type","ActivityTypes","Message","text","getActivityTextWithoutMentions","toLowerCase","startsWith","sendActivity","dc","createContext","beginDialog","ConversationUpdate","membersAdded","length","idx","id","recipient","welcomeCard","CardFactory","adaptiveCard","attachments","saveChanges","messageReactionActivityHandler","onMessageReaction","added","reactionsAdded","textFormat","processIncomingActivity","MessageExtensionDeclaration","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","Dialog","dialogId","super","options","endDialog","WelcomeCard","CdTest05MessageExtension","query","card","heroCard","HOSTNAME","parameters","Promise","resolve","attachmentLayout","title","setting","state","builder","crypto","CdTest05OutgoingWebhook","next","incoming","body","message","securityToken","SECURITY_TOKEN","auth","headers","authorization","msgBuf","Buffer","msgHash","createHmac","update","digest","send","JSON","stringify","OutgoingWebhookDeclaration","request","JsonDB","CdTest05Connector","connectors","push","appType","color","existing","groupName","user","webhookUrl","getData","filter","error","map","connector","reject","sections","activityTitle","activityText","activityImage","facts","potentialAction","@context","@type","target","method","uri","decodeURI","content-type","response","statusCode","ConnectorDeclaration"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder\");","module.exports = require(\"botbuilder-dialogs\");","import * as Express from \"express\";\r\nimport * as http from \"http\";\r\nimport * as path from \"path\";\r\nimport * as morgan from \"morgan\";\r\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\r\nimport * as debug from \"debug\";\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\nlog(`Initializing Microsoft Teams Express hosted App...`);\r\n\r\n// Initialize dotenv, to use .env file settings if existing\r\n// tslint:disable-next-line:no-var-requires\r\nrequire(\"dotenv\").config();\r\n\r\n// The import of components has to be done AFTER the dotenv config\r\nimport * as allComponents from \"./TeamsAppsComponents\";\r\n\r\n// Create the Express webserver\r\nconst express = Express();\r\nconst port = process.env.port || process.env.PORT || 3007;\r\n\r\n// Inject the raw request body onto the request object\r\nexpress.use(Express.json({\r\n    verify: (req, res, buf: Buffer, encoding: string): void => {\r\n        (req as any).rawBody = buf.toString();\r\n    }\r\n}));\r\nexpress.use(Express.urlencoded({ extended: true }));\r\n\r\n// Express configuration\r\nexpress.set(\"views\", path.join(__dirname, \"/\"));\r\n\r\n// Add simple logging\r\nexpress.use(morgan(\"tiny\"));\r\n\r\n// Add /scripts and /assets as static folders\r\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\r\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\r\n\r\n// routing for bots, connectors and incoming web hooks - based on the decorators\r\n// For more information see: https://www.npmjs.com/package/express-msteams-host\r\nexpress.use(MsTeamsApiRouter(allComponents));\r\n\r\n// routing for pages for tabs and connector configuration\r\n// For more information see: https://www.npmjs.com/package/express-msteams-host\r\nexpress.use(MsTeamsPageRouter({\r\n    root: path.join(__dirname, \"web/\"),\r\n    components: allComponents\r\n}));\r\n\r\n// Set default web page\r\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\r\n    index: \"index.html\"\r\n}));\r\n\r\n// Set the port\r\nexpress.set(\"port\", port);\r\n\r\n// Start the webserver\r\nhttp.createServer(express).listen(port, () => {\r\n    log(`Server running on ${port}`);\r\n});\r\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the cdTest05Tab tab\nexport * from \"./cdTest05Tab/CdTest05Tab\";\n// Automatically added for the cdTest05Bot bot\nexport * from \"./cdTest05Bot/CdTest05Bot\";\n// Automatically added for the cdTest05OutgoingWebhook outgoing webhook\nexport * from \"./cdTest05OutgoingWebhook/CdTest05OutgoingWebhook\";\n// Automatically added for the cdTest05Connector connector\nexport * from \"./cdTest05Connector/CdTest05Connector\";\n","import { PreventIframe } from \"express-msteams-host\";\r\n\r\n/**\r\n * Used as place holder for the decorators\r\n */\r\n@PreventIframe(\"/cdTest05Tab/index.html\")\r\n@PreventIframe(\"/cdTest05Tab/config.html\")\r\n@PreventIframe(\"/cdTest05Tab/remove.html\")\r\nexport class CdTest05Tab {\r\n}\r\n","import { BotDeclaration, MessageExtensionDeclaration, IBot, PreventIframe } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport { StatePropertyAccessor, CardFactory, TurnContext, MemoryStorage, ConversationState, ActivityTypes } from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\nimport CdTest05MessageExtension from \"../cdTest05MessageExtension/CdTest05MessageExtension\";\nimport { TeamsContext, TeamsActivityProcessor } from \"botbuilder-teams\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for cd test 05 Bot\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD)\n@PreventIframe(\"/cdTest05Bot/asdasdasd.html\")\nexport class CdTest05Bot implements IBot {\n    private readonly conversationState: ConversationState;\n    /**\n     * Local property for CdTest05MessageExtension\n     */\n    @MessageExtensionDeclaration(\"cdTest05MessageExtension\")\n    private _cdTest05MessageExtension: CdTest05MessageExtension;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n    private readonly activityProc = new TeamsActivityProcessor();\n\n    /**\n     * The constructor\n     * @param conversationState\n     */\n    public constructor(conversationState: ConversationState) {\n        // Message extension CdTest05MessageExtension\n        this._cdTest05MessageExtension = new CdTest05MessageExtension();\n\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        this.dialogs = new DialogSet(this.dialogState);\n        this.dialogs.add(new HelpDialog(\"help\"));\n\n        // Set up the Activity processing\n\n        this.activityProc.messageActivityHandler = {\n            // Incoming messages\n            onMessage: async (context: TurnContext): Promise<void> => {\n                // get the Microsoft Teams context, will be undefined if not in Microsoft Teams\n                const teamsContext: TeamsContext = TeamsContext.from(context);\n\n                // TODO: add your own bot logic in here\n                switch (context.activity.type) {\n                    case ActivityTypes.Message:\n                        const text = teamsContext ?\n                            teamsContext.getActivityTextWithoutMentions().toLowerCase() :\n                            context.activity.text;\n\n                        if (text.startsWith(\"hello\")) {\n                            await context.sendActivity(\"Oh, hello to you as well!\");\n                            return;\n                        } else if (text.startsWith(\"help\")) {\n                            const dc = await this.dialogs.createContext(context);\n                            await dc.beginDialog(\"help\");\n                        } else {\n                            await context.sendActivity(`I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`);\n                        }\n                        break;\n                    case ActivityTypes.ConversationUpdate:\n                        log(\"Conversation update\");\n                        // Display a welcome card when the bot is added to a conversation\n                        if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                            for (const idx in context.activity.membersAdded) {\n                                if (context.activity.membersAdded[idx].id !== context.activity.recipient.id) {\n                                    const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                                    await context.sendActivity({ attachments: [welcomeCard] });\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                // Save state changes\n                return this.conversationState.saveChanges(context);\n            }\n        };\n\n        // Message reactions in Microsoft Teams\n        this.activityProc.messageReactionActivityHandler = {\n            onMessageReaction: async (context: TurnContext): Promise<void> => {\n                const added = context.activity.reactionsAdded;\n                if (added && added[0]) {\n                    await context.sendActivity({\n                        textFormat: \"xml\",\n                        text: `That was an interesting reaction (<b>${added[0].type}</b>)`\n                    });\n                }\n            }\n        };\n    }\n\n    /**\n     * The Bot Framework `onTurn` handlder.\n     * The Microsoft Teams middleware for Bot Framework uses a custom activity processor (`TeamsActivityProcessor`)\n     * which is configured in the constructor of this sample\n     */\n    public async onTurn(context: TurnContext): Promise<any> {\n        // transfer the activity to the TeamsActivityProcessor\n        await this.activityProc.processIncomingActivity(context);\n    }\n}\n","import { Dialog, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';\r\n\r\nexport default class HelpDialog extends Dialog {\r\n    constructor(dialogId: string) {\r\n        super(dialogId);\r\n    }\r\n\r\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\r\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\r\n        return await context.endDialog();\r\n    }\r\n}","const WelcomeCard = require('./WelcomeCard.json');\r\n\r\nexport default { WelcomeCard };","import * as debug from \"debug\";\r\nimport { PreventIframe } from \"express-msteams-host\";\r\nimport { TurnContext, CardFactory } from \"botbuilder\";\r\nimport { MessagingExtensionQuery, MessagingExtensionResult } from \"botbuilder-teams\";\r\nimport { IMessagingExtensionMiddlewareProcessor } from \"botbuilder-teams-messagingextensions\";\r\n\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\n@PreventIframe(\"/cdTest05MessageExtension/config.html\")\r\nexport default class CdTest05MessageExtension implements IMessagingExtensionMiddlewareProcessor {\r\n\r\n    public async onQuery(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResult> {\r\n        const card = CardFactory.heroCard(\"Test\", \"Test\", [`https://${process.env.HOSTNAME}/assets/icon.png`]);\r\n\r\n        if (query.parameters && query.parameters[0] && query.parameters[0].name === \"initialRun\") {\r\n            // initial run\r\n\r\n            return Promise.resolve({\r\n                type: \"result\",\r\n                attachmentLayout: \"grid\",\r\n                attachments: [\r\n                    card\r\n                ]\r\n            } as MessagingExtensionResult);\r\n        } else {\r\n            // the rest\r\n            return Promise.resolve({\r\n                type: \"result\",\r\n                attachmentLayout: \"list\",\r\n                attachments: [\r\n                    card\r\n                ]\r\n            } as MessagingExtensionResult);\r\n        }\r\n    }\r\n\r\n    // this is used when canUpdateConfiguration is set to true\r\n    public async onQuerySettingsUrl(context: TurnContext): Promise<{ title: string, value: string }> {\r\n        return Promise.resolve({\r\n            title: \"cd test 05 Message Extension Configuration\",\r\n            value: `https://${process.env.HOSTNAME}/cdTest05MessageExtension/config.html`\r\n        });\r\n    }\r\n\r\n    public async onSettings(context: TurnContext): Promise<void> {\r\n        // take care of the setting returned from the dialog, with the value stored in state\r\n        const setting = context.activity.value.state;\r\n        log(`New setting: ${setting}`);\r\n        return Promise.resolve();\r\n    }\r\n\r\n}\r\n","module.exports = require(\"botbuilder-teams\");","import * as builder from \"botbuilder\";\r\nimport * as express from \"express\";\r\nimport * as crypto from \"crypto\";\r\nimport { OutgoingWebhookDeclaration, IOutgoingWebhook } from \"express-msteams-host\";\r\n\r\n/**\r\n * Implementation for cd test 05 Outgoing Webhook\r\n */\r\n@OutgoingWebhookDeclaration(\"/api/webhook\")\r\nexport class CdTest05OutgoingWebhook implements IOutgoingWebhook {\r\n\r\n    /**\r\n     * The constructor\r\n     */\r\n    public constructor() {\r\n    }\r\n\r\n    /**\r\n     * Implement your outgoing webhook logic here\r\n     * @param req the Request\r\n     * @param res the Response\r\n     * @param next\r\n     */\r\n    public requestHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\r\n        // parse the incoming message\r\n        const incoming = req.body as builder.Activity;\r\n\r\n        // create the response, any Teams compatible responses can be used\r\n        const message: Partial<builder.Activity> = {\r\n            type: builder.ActivityTypes.Message\r\n        };\r\n\r\n        const securityToken = process.env.SECURITY_TOKEN;\r\n        if (securityToken && securityToken.length > 0) {\r\n            // There is a configured security token\r\n            const auth = req.headers.authorization;\r\n            const msgBuf = Buffer.from((req as any).rawBody, \"utf8\");\r\n            const msgHash = \"HMAC \" + crypto.\r\n                createHmac(\"sha256\", new Buffer(securityToken as string, \"base64\")).\r\n                update(msgBuf).\r\n                digest(\"base64\");\r\n\r\n            if (msgHash === auth) {\r\n                // Message was ok and verified\r\n                message.text = `Echo ${incoming.text}`;\r\n            } else {\r\n                // Message could not be verified\r\n                message.text = `Error: message sender cannot be verified`;\r\n            }\r\n        } else {\r\n            // There is no configured security token\r\n            message.text = `Error: outgoing webhook is not configured with a security token`;\r\n        }\r\n\r\n        // send the message\r\n        res.send(JSON.stringify(message));\r\n    }\r\n}\r\n","module.exports = require(\"crypto\");","import * as request from \"request\";\r\nimport { Request } from \"express\";\r\nimport { ConnectorDeclaration, IConnector, PreventIframe } from \"express-msteams-host\";\r\nimport { CardFactory } from \"botbuilder-core\";\r\nimport JsonDB = require(\"node-json-db\");\r\nimport * as debug from \"debug\";\r\n\r\nconst log = debug(\"msteams\");\r\n\r\n/**\r\n * The connector data interface\r\n */\r\ninterface ICdTest05ConnectorData {\r\n    webhookUrl: string;\r\n    user: string;\r\n    appType: string;\r\n    groupName: string;\r\n    color: string;\r\n    existing: boolean;\r\n}\r\n\r\n/**\r\n * Implementation of the \"CdTest05ConnectorConnector\" Office 365 Connector\r\n */\r\n@ConnectorDeclaration(\r\n    \"/api/connector/connect\",\r\n    \"/api/connector/ping\"\r\n)\r\n@PreventIframe(\"/cdTest05Connector/config.html\")\r\nexport class CdTest05Connector implements IConnector {\r\n    private connectors: any;\r\n\r\n    public constructor() {\r\n        // Instantiate the node-json-db database (connectors.json)\r\n        this.connectors = new JsonDB(\"connectors\", true, false);\r\n    }\r\n\r\n    public Connect(req: Request) {\r\n        if (req.body.state === \"myAppsState\") {\r\n            this.connectors.push(\"/connectors[]\", {\r\n                appType: req.body.appType,\r\n                color: req.body.color,\r\n                existing: true,\r\n                groupName: req.body.groupName,\r\n                user: req.body.user,\r\n                webhookUrl: req.body.webhookUrl\r\n            });\r\n        }\r\n    }\r\n\r\n    public Ping(req: Request): Array<Promise <void>> {\r\n        // clean up connectors marked to be deleted\r\n        try {\r\n            this.connectors.push(\"/connectors\",\r\n                (this.connectors.getData(\"/connectors\") as ICdTest05ConnectorData[]).filter(((c) => {\r\n                    return c.existing;\r\n                })));\r\n        } catch (error) {\r\n            if (error.name && error.name === \"DataError\") {\r\n                // there\"s no registered connectors\r\n                return [];\r\n            }\r\n            throw error;\r\n        }\r\n\r\n        // send pings to all subscribers\r\n        return (this.connectors.getData(\"/connectors\") as ICdTest05ConnectorData[]).map((connector, index) => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                // TODO: implement adaptive cards when supported\r\n                const card = {\r\n                    title: \"Sample Connector\",\r\n                    text: \"This is a sample Office 365 Connector\",\r\n                    sections: [\r\n                        {\r\n                            activityTitle: \"Ping\",\r\n                            activityText: \"Sample ping \",\r\n                            activityImage: `https://${process.env.HOSTNAME}/assets/icon.png`,\r\n                            facts: [\r\n                                {\r\n                                    name: \"Generator\",\r\n                                    value: \"teams\"\r\n                                },\r\n                                {\r\n                                    name: \"Created by\",\r\n                                    value: connector.user\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                    potentialAction: [{\r\n                        \"@context\": \"http://schema.org\",\r\n                        \"@type\": \"ViewAction\",\r\n                        \"name\": \"Yo Teams\",\r\n                        \"target\": [\"http://aka.ms/yoteams\"]\r\n                    }],\r\n                };\r\n\r\n                log(`Sending card to ${connector.webhookUrl}`);\r\n\r\n                request({\r\n                    method: \"POST\",\r\n                    uri: decodeURI(connector.webhookUrl),\r\n                    headers: {\r\n                        \"content-type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(card)\r\n                }, (error: any, response: any, body: any) => {\r\n                    log(`Response from Connector endpoint is: ${response.statusCode}`);\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        // 410 - the user has removed the connector\r\n                        if (response.statusCode === 410) {\r\n                            this.connectors.push(`/connectors[${index}]/existing`, false);\r\n                        }\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n","module.exports = require(\"request\");","module.exports = require(\"node-json-db\");"],"sourceRoot":""}