{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder\"?fa14","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","[]","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/cdTest05Tab/CdTest05Tab.ts?c736","webpack:///./src/app/cdTest05Bot/CdTest05Bot.ts?ebf1","webpack:///./src/app/cdTest05Bot/dialogs/WelcomeDialog.ts?deef","webpack:///./src/app/cdTest05MessageExtension/CdTest05MessageExtension.ts?6814","webpack:///external \"botbuilder-teams\"?cb0c","webpack:///./src/app/cdTest05OutgoingWebhook/CdTest05OutgoingWebhook.ts?1a5e","webpack:///external \"crypto\"?4c76","webpack:///./src/app/cdTest05Connector/CdTest05Connector.ts?dd8f","webpack:///external \"request\"?0fbe","webpack:///external \"node-json-db\"?027e"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Express","http","path","morgan","express_msteams_host_1","log","debug","config","allComponents","app","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","join","__dirname","static","MsTeamsApiRouter","console","index","server","createServer","listen","nonce","__export","CdTest05Tab","__decorate","PreventIframe","botbuilder_1","WelcomeDialog_1","CdTest05MessageExtension_1","botbuilder_teams_1","CdTest05Bot","[object Object]","conversationState","this","activityProc","TeamsActivityProcessor","_cdTest05MessageExtension","default","dialogState","createProperty","messageActivityHandler","onMessage","context","__awaiter","teamsContext","TeamsContext","from","activity","type","ActivityTypes","Message","text","getActivityTextWithoutMentions","toLowerCase","startsWith","sendActivity","ConversationUpdate","membersAdded","length","idx","id","recipient","welcomeCard","CardFactory","adaptiveCard","attachments","saveChanges","messageReactionActivityHandler","onMessageReaction","added","reactionsAdded","textFormat","processIncomingActivity","MessageExtensionDeclaration","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","WelcomeCard","CdTest05MessageExtension","query","card","heroCard","HOSTNAME","parameters","Promise","resolve","attachmentLayout","title","setting","state","builder","crypto","CdTest05OutgoingWebhook","next","incoming","body","message","securityToken","SECURITY_TOKEN","auth","headers","authorization","msgBuf","Buffer","msgHash","createHmac","update","digest","send","JSON","stringify","OutgoingWebhookDeclaration","request","JsonDB","CdTest05Connector","connectors","push","appType","color","existing","groupName","user","webhookUrl","getData","filter","error","map","connector","reject","sections","activityTitle","activityText","activityImage","facts","potentialAction","@context","@type","target","method","uri","decodeURI","content-type","response","statusCode","ConnectorDeclaration"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder\");","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst app = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\napp.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\napp.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\napp.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\napp.use(morgan(\"tiny\"));\n\n// Add /scripts and /assets as static folders\napp.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\napp.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\napp.use(MsTeamsApiRouter(allComponents));\n\nconsole.log(\"asdsdhf sh lfkls hfl ask\");\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\n// app.use(MsTeamsPageRouter({\n//     root: path.join(__dirname, \"web/\"),\n//     components: allComponents\n// }));\n\n// Set default web page\napp.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\napp.set(\"port\", port);\n\n// Start the webserver\nconst server = http.createServer(app).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n\nexport { app, server };\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the cdTest05Tab tab\nexport * from \"./cdTest05Tab/CdTest05Tab\";\n// Automatically added for the cdTest05Bot bot\nexport * from \"./cdTest05Bot/CdTest05Bot\";\n// Automatically added for the cdTest05OutgoingWebhook outgoing webhook\nexport * from \"./cdTest05OutgoingWebhook/CdTest05OutgoingWebhook\";\n// Automatically added for the cdTest05Connector connector\nexport * from \"./cdTest05Connector/CdTest05Connector\";\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/cdTest05Tab/index.html\")\n@PreventIframe(\"/cdTest05Tab/config.html\")\n@PreventIframe(\"/cdTest05Tab/remove.html\")\nexport class CdTest05Tab {\n}\n","import { BotDeclaration, MessageExtensionDeclaration, IBot, PreventIframe } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport { StatePropertyAccessor, CardFactory, TurnContext, MemoryStorage, ConversationState, ActivityTypes } from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\nimport CdTest05MessageExtension from \"../cdTest05MessageExtension/CdTest05MessageExtension\";\nimport { TeamsContext, TeamsActivityProcessor } from \"botbuilder-teams\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for cd test 05 Bot\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD)\n@PreventIframe(\"/cdTest05Bot/asdasdasd.html\")\nexport class CdTest05Bot implements IBot {\n    private readonly conversationState: ConversationState;\n    /**\n     * Local property for CdTest05MessageExtension\n     */\n    @MessageExtensionDeclaration(\"cdTest05MessageExtension\")\n    private _cdTest05MessageExtension: CdTest05MessageExtension;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n    private readonly activityProc = new TeamsActivityProcessor();\n\n    /**\n     * The constructor\n     * @param conversationState\n     */\n    public constructor(conversationState: ConversationState) {\n        // Message extension CdTest05MessageExtension\n        this._cdTest05MessageExtension = new CdTest05MessageExtension();\n\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        // this.dialogs = new DialogSet(this.dialogState);\n        // this.dialogs.add(new HelpDialog(\"help\"));\n\n        // Set up the Activity processing\n\n        this.activityProc.messageActivityHandler = {\n            // Incoming messages\n            onMessage: async (context: TurnContext): Promise<void> => {\n                // get the Microsoft Teams context, will be undefined if not in Microsoft Teams\n                const teamsContext: TeamsContext = TeamsContext.from(context);\n\n                // TODO: add your own bot logic in here\n                switch (context.activity.type) {\n                    case ActivityTypes.Message:\n                        const text = teamsContext ?\n                            teamsContext.getActivityTextWithoutMentions().toLowerCase() :\n                            context.activity.text;\n\n                        if (text.startsWith(\"hello\")) {\n                            await context.sendActivity(\"Oh, hello to you as well!\");\n                            return;\n                        } else if (text.startsWith(\"help\")) {\n                            //const dc = await this.dialogs.createContext(context);\n                            //await dc.beginDialog(\"help\");\n                        } else {\n                            await context.sendActivity(`I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`);\n                        }\n                        break;\n                    case ActivityTypes.ConversationUpdate:\n                        log(\"Conversation update\");\n                        // Display a welcome card when the bot is added to a conversation\n                        if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                            for (const idx in context.activity.membersAdded) {\n                                if (context.activity.membersAdded[idx].id !== context.activity.recipient.id) {\n                                    const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                                    await context.sendActivity({ attachments: [welcomeCard] });\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                // Save state changes\n                return this.conversationState.saveChanges(context);\n            }\n        };\n\n        // Message reactions in Microsoft Teams\n        this.activityProc.messageReactionActivityHandler = {\n            onMessageReaction: async (context: TurnContext): Promise<void> => {\n                const added = context.activity.reactionsAdded;\n                if (added && added[0]) {\n                    await context.sendActivity({\n                        textFormat: \"xml\",\n                        text: `That was an interesting reaction (<b>${added[0].type}</b>)`\n                    });\n                }\n            }\n        };\n    }\n\n    /**\n     * The Bot Framework `onTurn` handlder.\n     * The Microsoft Teams middleware for Bot Framework uses a custom activity processor (`TeamsActivityProcessor`)\n     * which is configured in the constructor of this sample\n     */\n    public async onTurn(context: TurnContext): Promise<any> {\n        // transfer the activity to the TeamsActivityProcessor\n        await this.activityProc.processIncomingActivity(context);\n    }\n}\n","const WelcomeCard = require('./WelcomeCard.json');\n\nexport default { WelcomeCard };","import * as debug from \"debug\";\nimport { PreventIframe } from \"express-msteams-host\";\nimport { TurnContext, CardFactory } from \"botbuilder\";\nimport { MessagingExtensionQuery, MessagingExtensionResult } from \"botbuilder-teams\";\nimport { IMessagingExtensionMiddlewareProcessor } from \"botbuilder-teams-messagingextensions\";\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n@PreventIframe(\"/cdTest05MessageExtension/config.html\")\nexport default class CdTest05MessageExtension implements IMessagingExtensionMiddlewareProcessor {\n\n    public async onQuery(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResult> {\n        const card = CardFactory.heroCard(\"Test\", \"Test\", [`https://${process.env.HOSTNAME}/assets/icon.png`]);\n\n        if (query.parameters && query.parameters[0] && query.parameters[0].name === \"initialRun\") {\n            // initial run\n\n            return Promise.resolve({\n                type: \"result\",\n                attachmentLayout: \"grid\",\n                attachments: [\n                    card\n                ]\n            } as MessagingExtensionResult);\n        } else {\n            // the rest\n            return Promise.resolve({\n                type: \"result\",\n                attachmentLayout: \"list\",\n                attachments: [\n                    card\n                ]\n            } as MessagingExtensionResult);\n        }\n    }\n\n    // this is used when canUpdateConfiguration is set to true\n    public async onQuerySettingsUrl(context: TurnContext): Promise<{ title: string, value: string }> {\n        return Promise.resolve({\n            title: \"cd test 05 Message Extension Configuration\",\n            value: `https://${process.env.HOSTNAME}/cdTest05MessageExtension/config.html`\n        });\n    }\n\n    public async onSettings(context: TurnContext): Promise<void> {\n        // take care of the setting returned from the dialog, with the value stored in state\n        const setting = context.activity.value.state;\n        log(`New setting: ${setting}`);\n        return Promise.resolve();\n    }\n\n}\n","module.exports = require(\"botbuilder-teams\");","import * as builder from \"botbuilder\";\nimport * as express from \"express\";\nimport * as crypto from \"crypto\";\nimport { OutgoingWebhookDeclaration, IOutgoingWebhook } from \"express-msteams-host\";\n\n/**\n * Implementation for cd test 05 Outgoing Webhook\n */\n@OutgoingWebhookDeclaration(\"/api/webhook\")\nexport class CdTest05OutgoingWebhook implements IOutgoingWebhook {\n\n    /**\n     * The constructor\n     */\n    public constructor() {\n    }\n\n    /**\n     * Implement your outgoing webhook logic here\n     * @param req the Request\n     * @param res the Response\n     * @param next\n     */\n    public requestHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\n        // parse the incoming message\n        const incoming = req.body as builder.Activity;\n\n        // create the response, any Teams compatible responses can be used\n        const message: Partial<builder.Activity> = {\n            type: builder.ActivityTypes.Message\n        };\n\n        const securityToken = process.env.SECURITY_TOKEN;\n        if (securityToken && securityToken.length > 0) {\n            // There is a configured security token\n            const auth = req.headers.authorization;\n            const msgBuf = Buffer.from((req as any).rawBody, \"utf8\");\n            const msgHash = \"HMAC \" + crypto.\n                createHmac(\"sha256\", new Buffer(securityToken as string, \"base64\")).\n                update(msgBuf).\n                digest(\"base64\");\n\n            if (msgHash === auth) {\n                // Message was ok and verified\n                message.text = `Echo ${incoming.text}`;\n            } else {\n                // Message could not be verified\n                message.text = `Error: message sender cannot be verified`;\n            }\n        } else {\n            // There is no configured security token\n            message.text = `Error: outgoing webhook is not configured with a security token`;\n        }\n\n        // send the message\n        res.send(JSON.stringify(message));\n    }\n}\n","module.exports = require(\"crypto\");","import * as request from \"request\";\nimport { Request } from \"express\";\nimport { ConnectorDeclaration, IConnector, PreventIframe } from \"express-msteams-host\";\nimport { CardFactory } from \"botbuilder-core\";\nimport JsonDB = require(\"node-json-db\");\nimport * as debug from \"debug\";\n\nconst log = debug(\"msteams\");\n\n/**\n * The connector data interface\n */\ninterface ICdTest05ConnectorData {\n    webhookUrl: string;\n    user: string;\n    appType: string;\n    groupName: string;\n    color: string;\n    existing: boolean;\n}\n\n/**\n * Implementation of the \"CdTest05ConnectorConnector\" Office 365 Connector\n */\n@ConnectorDeclaration(\n    \"/api/connector/connect\",\n    \"/api/connector/ping\"\n)\n@PreventIframe(\"/cdTest05Connector/config.html\")\nexport class CdTest05Connector implements IConnector {\n    private connectors: any;\n\n    public constructor() {\n        // Instantiate the node-json-db database (connectors.json)\n        this.connectors = new JsonDB(\"connectors\", true, false);\n    }\n\n    public Connect(req: Request) {\n        if (req.body.state === \"myAppsState\") {\n            this.connectors.push(\"/connectors[]\", {\n                appType: req.body.appType,\n                color: req.body.color,\n                existing: true,\n                groupName: req.body.groupName,\n                user: req.body.user,\n                webhookUrl: req.body.webhookUrl\n            });\n        }\n    }\n\n    public Ping(req: Request): Array<Promise <void>> {\n        // clean up connectors marked to be deleted\n        try {\n            this.connectors.push(\"/connectors\",\n                (this.connectors.getData(\"/connectors\") as ICdTest05ConnectorData[]).filter(((c) => {\n                    return c.existing;\n                })));\n        } catch (error) {\n            if (error.name && error.name === \"DataError\") {\n                // there\"s no registered connectors\n                return [];\n            }\n            throw error;\n        }\n\n        // send pings to all subscribers\n        return (this.connectors.getData(\"/connectors\") as ICdTest05ConnectorData[]).map((connector, index) => {\n            return new Promise<void>((resolve, reject) => {\n                // TODO: implement adaptive cards when supported\n                const card = {\n                    title: \"Sample Connector\",\n                    text: \"This is a sample Office 365 Connector\",\n                    sections: [\n                        {\n                            activityTitle: \"Ping\",\n                            activityText: \"Sample ping \",\n                            activityImage: `https://${process.env.HOSTNAME}/assets/icon.png`,\n                            facts: [\n                                {\n                                    name: \"Generator\",\n                                    value: \"teams\"\n                                },\n                                {\n                                    name: \"Created by\",\n                                    value: connector.user\n                                }\n                            ]\n                        }\n                    ],\n                    potentialAction: [{\n                        \"@context\": \"http://schema.org\",\n                        \"@type\": \"ViewAction\",\n                        \"name\": \"Yo Teams\",\n                        \"target\": [\"http://aka.ms/yoteams\"]\n                    }],\n                };\n\n                log(`Sending card to ${connector.webhookUrl}`);\n\n                request({\n                    method: \"POST\",\n                    uri: decodeURI(connector.webhookUrl),\n                    headers: {\n                        \"content-type\": \"application/json\",\n                    },\n                    body: JSON.stringify(card)\n                }, (error: any, response: any, body: any) => {\n                    log(`Response from Connector endpoint is: ${response.statusCode}`);\n                    if (error) {\n                        reject(error);\n                    } else {\n                        // 410 - the user has removed the connector\n                        if (response.statusCode === 410) {\n                            this.connectors.push(`/connectors[${index}]/existing`, false);\n                        }\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n}\n\n","module.exports = require(\"request\");","module.exports = require(\"node-json-db\");"],"sourceRoot":""}